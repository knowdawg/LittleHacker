[gd_scene load_steps=10 format=3 uid="uid://duuow1rs2d810"]

[ext_resource type="Shader" path="res://Levels/TestLevels/SDFListenerFluidSim.gdshader" id="1_a5oeb"]
[ext_resource type="Shader" path="res://Levels/TestLevels/fluid_sim_translator.gdshader" id="2_hyw44"]

[sub_resource type="ViewportTexture" id="ViewportTexture_u6ktg"]
viewport_path = NodePath("SubViewport")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_ihw2i"]
resource_local_to_scene = true
shader = ExtResource("1_a5oeb")
shader_parameter/smoke = SubResource("ViewportTexture_u6ktg")

[sub_resource type="Shader" id="Shader_eylr8"]
code = "shader_type canvas_item;

uniform sampler2D prevFrame : filter_linear_mipmap;
uniform sampler2D externalForces;
uniform vec2 resolution;
uniform vec2 gravity;
uniform float ballX : hint_range(0.0, 1.0, 0.01);
uniform float ballY : hint_range(0.0, 1.0, 0.01);

void fragment() {
	float k = 0.2;
	float dt = 0.15;
	float v = 0.5;

	vec2 newForce = vec2(0.0);

	//Centeral Finite Diference Scale (Mabye to store the data in the middle of the cell? idk)
	float cScale = 1.0;

	float s = k / dt;

	//Sampling nehboring pixels
	vec2 inverseResolution = 1.0 / resolution;

	vec4 centerCell = texture(prevFrame, UV);
	vec4 rightCell = texture(prevFrame, UV + vec2(inverseResolution.x, 0.0));
	vec4 leftCell = texture(prevFrame, UV - vec2(inverseResolution.x, 0.0));
	vec4 topCell = texture(prevFrame, UV - vec2(0.0, inverseResolution.y));
	vec4 downCell = texture(prevFrame, UV + vec2(0.0, inverseResolution.y));

	float subAmount = 0.5;
	float mulAmount = 1.0;
	centerCell.xy = (centerCell.xy - subAmount) * mulAmount;
	rightCell.xy = (rightCell.xy - subAmount) * mulAmount;
	leftCell.xy = (leftCell.xy - subAmount) * mulAmount;
	topCell.xy = (topCell.xy - subAmount) * mulAmount;
	downCell.xy = (downCell.xy - subAmount) * mulAmount;

	//du/dx and du/dy
	vec3 udx = (leftCell.rgb - rightCell.rgb) * cScale;
	vec3 udy = (topCell.rgb - downCell.rgb) * cScale;

	float uDiv = udx.x + udy.y; //the change in x in the x axis and the change in y in the y axis
	vec2 ddx = vec2(udx.z, udy.z); //Difrence in density is equal to the difrence in density on the x axis and the difrence in density on the y axis

	//Solve for density
	centerCell.z -= dt * dot(vec3(ddx, uDiv), centerCell.xyz);
	centerCell.z = clamp(centerCell.z, 0.5, 3.0); //Breaks

	//Solve for Velocity
	vec2 pdx = s * ddx; //original
	vec2 laplacian = vec2(rightCell.x + leftCell.x + topCell.x + downCell.x, rightCell.y + leftCell.y + topCell.y + downCell.y) - 4.0 * centerCell.xy; //original
	//vec2 laplacian = topCell.xy + downCell.xy + rightCell.xy + leftCell.xy - 4.0 * centerCell.xy; //alt
	vec2 viscosityForce = v * laplacian;

	//Advection
	vec2 prevLoc = UV - dt * centerCell.xy * inverseResolution;
	centerCell.xy = texture(prevFrame, prevLoc).xy; //original
	//centerCell.xy = texture(prevFrame, prevLoc).xy;//alt

	//SDF forces
	vec2 centerForce = texture(externalForces, UV).xy;
	float leftForce  = texture(externalForces, UV - vec2(inverseResolution.x * 5.0, 0.0)).y;
	float rightForce  = texture(externalForces, UV + vec2(inverseResolution.x * 5.0, 0.0)).y;
	float topForce  = texture(externalForces, UV - vec2(0.0, inverseResolution.y * 5.0)).y;
	float downForce  = texture(externalForces, UV + vec2(0.0, inverseResolution.y * 5.0)).y;

	newForce = -vec2(leftForce - rightForce, topForce - downForce);

	centerCell.xy += dt * (viscosityForce - pdx + newForce + gravity); // original
	//centerCell.xy += dt * (viscosityForce.xy - k/dt * uDiv + newForce + gravity) * 1.0; //alt
	//centerCell.xy = max(vec2(0), abs(centerCell.xy)-1e-4)*sign(centerCell.xy); //alt

	//Boundry Conditions
	if(distance(UV, vec2(ballX, ballY)) < 0.05){
		centerCell.rgb = vec3(normalize(UV - vec2(ballX, ballY)) * -vec2(1.0, 1.0), 1.0);
		//centerCell.rgb = vec3(0.0, 0.0, 1.0);
	}
	//if(UV.y >= 0.98){
		//if(abs(UV.x - 0.5) < 0.5){
			//centerCell.rgb = vec3(0.0, 1.0, 1.0);
		//}
	//}

	//float dis = 1.0 - distance(UV, vec2(ballX, ballY));
	//dis = smoothstep(0.90, 1.0, dis);
	//centerCell.x = dis;

	//centerCell.y *= smoothstep(.5,.48,abs(UV.y-0.5)); //alt
	centerCell.z -= 0.02 * dt;
	centerCell.x -= 0.02 * dt;
	centerCell.y -= 0.02 * dt;

	//float borders = 1.0 - abs(UV.x - 0.5);
	//borders = smoothstep(0.5, 0.7, borders);
	//borders -= smoothstep(0.5, 2.0, 1.0 - UV.y);
	//centerCell.z *= borders;

	//centerCell.z *= step(0.1, topCell.z + downCell.z + leftCell.z + rightCell.z);
	//centerCell.x *= centerCell.z;
	//centerCell.y *= centerCell.z;

	//centerCell.xy = clamp(centerCell.xy, vec2(-1.0), vec2(1.0));
	//centerCell.xy = (centerCell.xy + 1.0) * 0.5;
	//centerCell = clamp(centerCell, vec4(vec2(-10), 0.5 , -10.), vec4(vec2(10), 3.0 , 10.)); //alt
	//centerCell.xy = (centerCell.xy);
	//centerCell.y *= smoothstep(.5,.48,abs(UV.y-0.5));

	//centerCell = clamp(centerCell, vec4(0.0), vec4(1.0));
	centerCell.xy = centerCell.xy; //* vec2(-1.0, 1.0);


	COLOR = centerCell;
	//COLOR = vec4(0.0, 0.0, 0.0, 1.0);
}
"

[sub_resource type="ViewportTexture" id="ViewportTexture_dbwyw"]
viewport_path = NodePath("SDFListener")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_p8ird"]
resource_local_to_scene = true
shader = SubResource("Shader_eylr8")
shader_parameter/resolution = Vector2(256, 256)
shader_parameter/gravity = Vector2(0, 0)
shader_parameter/ballX = 0.39
shader_parameter/ballY = 0.39
shader_parameter/prevFrame = SubResource("ViewportTexture_dbwyw")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_sm4on"]
shader = ExtResource("2_hyw44")

[sub_resource type="ViewportTexture" id="ViewportTexture_o2gd8"]
viewport_path = NodePath("SubViewport")

[node name="FluidSim" type="Node2D"]

[node name="SDFListener" type="SubViewport" parent="."]
size = Vector2i(128, 128)
render_target_clear_mode = 2

[node name="SDFListener" type="ColorRect" parent="SDFListener"]
material = SubResource("ShaderMaterial_ihw2i")
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
color = Color(0, 0, 0, 1)

[node name="SubViewport" type="SubViewport" parent="."]
size = Vector2i(128, 128)

[node name="ColorRect" type="ColorRect" parent="SubViewport"]
material = SubResource("ShaderMaterial_p8ird")
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
color = Color(0, 0, 0, 1)

[node name="Sprite2D" type="Sprite2D" parent="."]
texture_filter = 1
material = SubResource("ShaderMaterial_sm4on")
position = Vector2(0, -64)
texture = SubResource("ViewportTexture_o2gd8")
